plugins {
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.architectury.plugin
    alias libs.plugins.modmuss.publish
}

architectury {
    minecraft = libs.versions.minecraft.get()
}

subprojects {
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft libs.minecraft
        // The following line declares the yarn mappings you may select this one as well.
        mappings "net.fabricmc:yarn:${libs.versions.yarn.mappings.get()}:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    ext.mod_version = libs.versions.mod.version.get()
    ext.minecraft_version = libs.versions.minecraft.get()
    ext.total_version = "$mod_version+$minecraft_version"

    archivesBaseName = rootProject.name
    version = ext.total_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}


publishMods {
    //TODO: write a parser to take the latest changelog from CHANGELOG.md
    changelog = "Reduce mod size"
    type = BETA

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("curseforge_api_key")
        minecraftVersions.add("1.20.4")
        projectId = "979805"
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "wGJ6yOo9"
        minecraftVersions.add("1.20.4")
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_name} ${rootProject.total_version} Fabric"
        version = "${rootProject.total_version}-fabric"
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_name} ${rootProject.total_version} Forge"
        version = "${rootProject.total_version}-forge"
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_name} ${rootProject.total_version} Fabric"
        version = "${rootProject.total_version}-fabric"
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "${rootProject.mod_name} ${rootProject.total_version} Forge"
        version = "${rootProject.total_version}-forge"
    }
}